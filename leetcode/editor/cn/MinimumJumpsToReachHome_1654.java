package cn;

//Êúâ‰∏ÄÂè™Ë∑≥Ëö§ÁöÑÂÆ∂Âú®Êï∞ËΩ¥‰∏äÁöÑ‰ΩçÁΩÆ x Â§Ñ„ÄÇËØ∑‰Ω†Â∏ÆÂä©ÂÆÉ‰ªé‰ΩçÁΩÆ 0 Âá∫ÂèëÔºåÂà∞ËææÂÆÉÁöÑÂÆ∂„ÄÇ
//
// Ë∑≥Ëö§Ë∑≥Ë∑ÉÁöÑËßÑÂàôÂ¶Ç‰∏ãÔºö 
//
// 
// ÂÆÉÂèØ‰ª• ÂæÄÂâç Ë∑≥ÊÅ∞Â•Ω a ‰∏™‰ΩçÁΩÆÔºàÂç≥ÂæÄÂè≥Ë∑≥Ôºâ„ÄÇ 
// ÂÆÉÂèØ‰ª• ÂæÄÂêé Ë∑≥ÊÅ∞Â•Ω b ‰∏™‰ΩçÁΩÆÔºàÂç≥ÂæÄÂ∑¶Ë∑≥Ôºâ„ÄÇ 
// ÂÆÉ‰∏çËÉΩ ËøûÁª≠ ÂæÄÂêéË∑≥ 2 Ê¨°„ÄÇ 
// ÂÆÉ‰∏çËÉΩË∑≥Âà∞‰ªª‰Ωï forbidden Êï∞ÁªÑ‰∏≠ÁöÑ‰ΩçÁΩÆ„ÄÇ 
// 
//
// Ë∑≥Ëö§ÂèØ‰ª•ÂæÄÂâçË∑≥ Ë∂ÖËøá ÂÆÉÁöÑÂÆ∂ÁöÑ‰ΩçÁΩÆÔºå‰ΩÜÊòØÂÆÉ ‰∏çËÉΩË∑≥Âà∞Ë¥üÊï¥Êï∞ ÁöÑ‰ΩçÁΩÆ„ÄÇ 
//
// Áªô‰Ω†‰∏Ä‰∏™Êï¥Êï∞Êï∞ÁªÑ forbidden ÔºåÂÖ∂‰∏≠ forbidden[i] ÊòØË∑≥Ëö§‰∏çËÉΩË∑≥Âà∞ÁöÑ‰ΩçÁΩÆÔºåÂêåÊó∂Áªô‰Ω†Êï¥Êï∞ aÔºå b Âíå x ÔºåËØ∑‰Ω†ËøîÂõûË∑≥Ëö§Âà∞ÂÆ∂ÁöÑÊúÄÂ∞ëË∑≥Ë∑É
//Ê¨°Êï∞„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÊÅ∞Â•ΩÂà∞Ëææ x ÁöÑÂèØË°åÊñπÊ°àÔºåËØ∑‰Ω†ËøîÂõû -1 „ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºöforbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
//ËæìÂá∫Ôºö3
//Ëß£ÈáäÔºöÂæÄÂâçË∑≥ 3 Ê¨°Ôºà0 -> 3 -> 6 -> 9ÔºâÔºåË∑≥Ëö§Â∞±Âà∞ÂÆ∂‰∫Ü„ÄÇ
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºöforbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
//ËæìÂá∫Ôºö-1
// 
//
// Á§∫‰æã 3Ôºö 
//
// 
//ËæìÂÖ•Ôºöforbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
//ËæìÂá∫Ôºö2
//Ëß£ÈáäÔºöÂæÄÂâçË∑≥‰∏ÄÊ¨°Ôºà0 -> 16ÔºâÔºåÁÑ∂ÂêéÂæÄÂõûË∑≥‰∏ÄÊ¨°Ôºà16 -> 7ÔºâÔºåË∑≥Ëö§Â∞±Âà∞ÂÆ∂‰∫Ü„ÄÇ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= forbidden.length <= 1000 
// 1 <= a, b, forbidden[i] <= 2000 
// 0 <= x <= 2000 
// forbidden ‰∏≠ÊâÄÊúâ‰ΩçÁΩÆ‰∫í‰∏çÁõ∏Âêå„ÄÇ 
// ‰ΩçÁΩÆ x ‰∏çÂú® forbidden ‰∏≠„ÄÇ 
// 
// Related Topics ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ Âä®ÊÄÅËßÑÂàí 
// üëç 55 üëé 0


import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author 17862
 */
public class MinimumJumpsToReachHome_1654 {
    public static void main(String[] args) {
        int[] forbidden = new int[]{3};
        Solution solution = new Solution();
        solution.minimumJumps(forbidden, 14, 5, 90);
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    static class Solution {
        public int minimumJumps(int[] forbidden, int a, int b, int x) {
            if (x == 0) {
                return 0;
            }

            Set<Integer> badSet = new HashSet<>();
            int f = 0;
            for (int bad : forbidden) {
                badSet.add(bad);
                f = Math.max(f, bad);
            }

            List<int[]> deque = new ArrayList<>();
            // cur[0] current index;
            // cur[1] current have already jump backward times;
            deque.add(new int[]{0, 0});
            Set<Integer> visitedIndex0 = new HashSet<>();
            Set<Integer> visitedIndex1 = new HashSet<>();
            // the max index
            int max = Math.max(f + a + b, x + b);
            for (int step = 1; !deque.isEmpty(); step++) {
                List<int[]> nextDeque = new ArrayList<>();
                for (int[] cur : deque) {
                    int index = cur[0];

                    if (cur[1] == 0 && visitedIndex0.contains(index)) {
                        continue;
                    } else if (cur[1] == 1 && visitedIndex1.contains(index)) {
                        continue;
                    }

                    // jump forward
                    int forward = index + a;
                    if (forward <= max && !badSet.contains(forward) && !visitedIndex0.contains(forward)) {
                        if (forward == x) {
                            return step;
                        }
                        nextDeque.add(new int[]{forward, 0});
                    }
                    if (cur[1] == 0) {
                        // jump backward
                        int backward = index - b;
                        if (backward > 0 && !badSet.contains(backward) && !visitedIndex1.contains(backward)) {
                            if (backward == x) {
                                return step;
                            }
                            nextDeque.add(new int[]{backward, 1});
                        }
                        visitedIndex0.add(index);
                    } else {
                        visitedIndex1.add(index);
                    }
                }
                deque = nextDeque;
            }
            return -1;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}